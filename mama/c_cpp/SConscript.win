import os
import sys
import posixpath
Import('*')
env = env.Clone()
versions = env['versions']['mama']

libpath = []

includePath = []
includePath.append( '.' )
includePath.append( '#common/c_cpp/src/c' )
includePath.append( '#common/c_cpp/src/c/windows' )
includePath.append( '#common/c_cpp/src/c/wombat' )
includePath.append( '#mama/c_cpp/src/c' )
includePath.append( '#mama/c_cpp/src/enterprise/c' )

h = os.path.join( Dir('#').abspath, 'mama\\c_cpp\\src\\c\\mama\\version.h' )
c = os.path.join( Dir('#').abspath, 'mama\\c_cpp\\src\\c\\version.c' )

major = versions['major']
minor = versions['minor']
release = versions['release']
winrelease = versions['winrelease']
buildNum = versions['build']
releaseString = versions['releaseString']

rcVerNum = "%s,%s,%s,%s" % ( major, minor, winrelease, buildNum )
rcVerString = "%s.%s.%s.%s\0" % ( major, minor, winrelease, buildNum )

verH = open( h , "w" )
verH.write("""/* This file was automatically generated */
#ifndef MamaVersionH
#define MamaVersionH
#define MAMA_VERSION_MAJOR %s
#define MAMA_VERSION_MINOR %s
#define MAMA_VERSION_RELEASE %s
#define MAMA_VERSION "mama %s"
#define RC_VERSION_NUMERICAL %s
#define RC_VERSION_STRING %s
#define RC_C_DLL_NAME "libmamac.dll"
#define RC_CPP_DLL_NAME "libmamacpp.dll"
extern const char* mama_version;
#endif
""" % ( major, minor, release, releaseString, rcVerNum, rcVerString ) )
verH.close()

verC = open( c , "w" )
verC.write("""/* This file was automatically generated */
const char* mama_version = "mama %s";""" % ( releaseString ) )
verC.close()

build = env['build']

objdir = os.path.join( env['blddir'], build )

libpath.append( os.path.join( objdir, 'common\\c_cpp\\src\\c' ) )
libpath.append( os.path.join( objdir, 'mama\\c_cpp\\src\\c' ) )

env.Append(
    LIBS        = ['ws2_32','advapi32','kernel32','secur32','pdh','Psapi'],
    LIBPATH     = [ libpath ],
    RCFLAGS     = ['-d"_UNICODE"', '-d "UNICODE"','-I%s' % os.path.join( env.Dir('#').abspath, "mama\\c_cpp\\src\\c")],
    LINKFLAGS   = ['/MAP'],
    CPPDEFINES  = ['XML_STATIC','FD_SETSIZE=1024','NOWINMESSAGES','HAVE_WOMBAT_MSG','REFRESH_TRANSPORT','VERSION=%s' % (releaseString)],
    CPPPATH     = includePath,
    RC_VERSION_NUMERICAL = rcVerNum,
    RC_VERSION_STRING = rcVerString,
)

if env.get('with_enterprise',None) == True:
    env.Append( CPPDEFINES = ['WITH_ENTERPRISE'] )

if build == 'dynamic':
    env.Append(
        LINKFLAGS   = ['/DEBUG','/NODEFAULTLIB:libcmt.lib','/NODEFAULTLIB:libc.lib'],
        CPPDEFINES  = ['MAMA_DLL'],
        CCFLAGS     = ['/MD','/Ox'],
        LIBS        = ['libwombatcommonmd'],
    )

elif build == 'static':
    env.Append(
        LINKFLAGS   = ['/DEBUG','/NODEFAULTLIB:libcmt.lib','/NODEFAULTLIB:libc.lib'],
        CPPDEFINES  = ['MAMA_STATIC'],
        CCFLAGS     = ['/MT','/Ox'],
        LIBS        = ['libwombatcommonmt'],
    )

elif build == 'dynamic-debug':
    env.Append(
        LINKFLAGS   = ['/DEBUG','/NODEFAULTLIB:libcmt.lib','/NODEFAULTLIB:libc.lib','/NODEFAULTLIB:libcmtd.lib'],
        CPPDEFINES  = ['MAMA_DLL'],
        CCFLAGS     = ['/MDd'],
        LIBS        = ['libwombatcommonmdd'],
    )

elif build == 'static-debug':
    env.Append(
        LINKFLAGS   = ['/DEBUG','/NODEFAULTLIB:libcmt.lib','/NODEFAULTLIB:libc.lib'],
        CPPDEFINES  = ['MAMA_STATIC'],
        CCFLAGS     = ['/MTd'],
        LIBS        = ['libwombatcommonmtd'],
    )

if env['entitled'] == True:
    Alias( 'install', env.Install('$bindir', posixpath.join( env['entitle_home'], 'pdb/liboeac%s.pdb' % ( env['suffix'])) ) )

env.SConscript('src/c/SConscript.win','env')
env.SConscript('src/cpp/SConscript.win','env')
env.SConscript('src/c/payload/SConscript.win','env')
env.SConscript('src/c/bridge/SConscript.win','env')
env.SConscript('src/examples/SConscript.win','env')

if env['with_unittest'] == True and 'dynamic' in env['build']:
    env.SConscript( 'src/gunittest/SConscript.win','env' )

if env['with_testtools'] == True and 'dynamic' in env['build']:
    env.SConscript( 'src/testtools/SConscript.win','env' )

if (    not Media.has_key('mama/c_cpp/docs')
        and env['build'] == 'dynamic'
        and not env.GetOption('clean')
        and env['product'] == 'mama'
        and env['with_docs'] == True ):

    cdoc = env.Doxygen('doxyconfig-c.in')
    cppdoc = env.Doxygen('doxyconfig-cpp.in')

    env.Command( '$prefix/doc/mama', '', 'mkdir $TARGET && xcopy /q /s /e /y %s\mama\c_cpp\doc\* $TARGET' % ( env['TOPLEVEL'] ) )

    env.Clean( cdoc, '%s/mama/c_cpp/doc/c' % (env['TOPLEVEL']) )
    env.Clean( cppdoc, '%s/mama/c_cpp/doc/cpp' % (env['TOPLEVEL']) )

    Media['mama/c_cpp/docs'] = 1


Clean('src/c/SConscript.win', h)
Clean('src/c/SConscript.win', c)
