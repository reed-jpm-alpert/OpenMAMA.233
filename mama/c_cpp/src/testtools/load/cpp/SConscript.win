Import('env')
env = env.Clone()

InstBin = []

binaries = Split("""
	mamachurncpp
""")

libs = []
libs.append('libmamac%s' % ( env['suffix'] ))
libs.append('libmamacpp%s' % ( env['suffix'] ))

incpath = []
incpath.append( '#mama/c_cpp/src/cpp' )

libpath = []
libpath.append('$libdir')

if 'static' in env['build']:
	libs.append('libwombatmsg%s' % ( env['suffix'] ))
	libs.append('libwombatcommon%s' % ( env['suffix'] ))
	libs.append('shlwapi')
	if 'lbm' in env['middleware']:
		libpath.append( os.path.join( lbm_home, 'lib' ) )
		libs.append('lbm_static')
		libs.append('libmamalbmimpl%s' % ( env['suffix'] ))
	if env['entitled'] == True:
		libs.append( posixpath.join( env['entitle_home'], 'lib/%s/liboeac%s' % ( env['build'],env['suffix'])) )

env.Append( 
	LIBS 		= libs,
	LIBPATH 	= libpath,
	CPPPATH	= incpath,
)

for b in binaries:
	example = env.Program(b, '%s.cpp' % (b) ) 
	#if env['vsver'] >= 8:
	#	env.AddPostAction( example, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1')
	InstBin.append( example )

Alias( 'install', env.Install('$bindir',InstBin) )
