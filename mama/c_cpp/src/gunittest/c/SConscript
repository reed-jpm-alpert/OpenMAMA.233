#!/usr/bin/python
# -*- coding: utf-8 -*-
import subprocess
import os
Import('*')
env = env.Clone()

target = 'UnitTestMamaC'

incpath = []
incpath.append('.')
incpath.append('$incdir')
incpath.append('#common/c_cpp/src/c')
incpath.append('#mama/c_cpp/src/c')

libpath = []
libpath.append('$libdir')

env.Append(LIBPATH=libpath, LIBS=['dl', 'wombatcommon', 'mama'],
           CPPPATH=incpath)

if env['entitled'] == True:
    env.Append(
        LIBPATH = [ os.path.join(env['entitle_home'],'lib') ],
        LIBS = ['oeac']
    )

env['CCFLAGS'] = [x for x in env['CCFLAGS'] if x != '-pedantic-errors']

sources = Split("""
inboxtest.cpp
iotest.cpp
msgutils.cpp
openclosetest.cpp
payloadmiddlewareidtest.cpp
publishertest.cpp
queuetest.cpp
subscriptiontest.cpp
timertest.cpp
transporttest.cpp
fieldcache/fieldcachevectortest.cpp
fieldcache/fieldcachelisttest.cpp
fieldcache/fieldcachemaptest.cpp
fieldcache/fieldcachefieldtest.cpp
fieldcache/fieldcacheiteratortest.cpp
fieldcache/fieldcacherecordtest.cpp
fieldcache/fieldcachetest.cpp
""")

MainUnitTest = env.Object( 'MainUnitTestC.cpp' ) 
sources.append( MainUnitTest )

bin = env.Program(target, sources)

Alias('install', env.Install('$bindir', bin))

env.PrependENVPath('LD_LIBRARY_PATH', Dir('%s/lib' % env['prefix'
                   ]).abspath)

bins = []

MamaDateTimeSrc = Glob('mamadatetime/*.cpp')
MamaDateTimeSrc.append( MainUnitTest )

MamaMsgSrc = Glob('mamamsg/*.cpp')
MamaMsgSrc.append( MainUnitTest )

MamaPriceSrc = Glob('mamaprice/*.cpp')
MamaPriceSrc.append( MainUnitTest )

MiddlewareCSrc = Glob('middleware/*.cpp')
MiddlewareCSrc.append( MainUnitTest )

PayloadCSrc = Glob('payload/*.cpp')
PayloadCSrc.append( MainUnitTest )

bins += env.Program( 'UnitTestMamaDateTimeC', MamaDateTimeSrc )
bins += env.Program( 'UnitTestMamaMiddlewareC', MiddlewareCSrc )
bins += env.Program( 'UnitTestMamaMsgC', MamaMsgSrc )
bins += env.Program( 'UnitTestMamaPayloadC', PayloadCSrc )
bins += env.Program( 'UnitTestMamaPriceC', MamaPriceSrc )

Alias( 'install',env.Install('$bindir',bins) )

def runUnitTest(env, target, program):
    env = dict(os.environ)
    env['LD_LIBRARY_PATH'] = Dir('$libdir').abspath
    args = ['--gtest_output=%s' % target]
    p = subprocess.Popen(
        args,
        shell=True,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        env=env,
        )
    p.communicate()[0]
    print 'Finished'


if 'test' in BUILD_TARGETS:
    test_alias = Alias('test', env.Command('%s.xml' % bin[0].name, bin,
                       '$SOURCE --gtest_output=xml:$TARGET'))
    AlwaysBuild(test_alias)
